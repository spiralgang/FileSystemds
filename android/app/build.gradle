plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.spiralgang.filesystemds'
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.spiralgang.filesystemds"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Enable vector drawables support
        vectorDrawables.useSupportLibrary = true
        
        // Build config fields
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
        buildConfigField "String", "GIT_COMMIT", "\"${getGitCommitHash()}\""
        
        // NDK configuration for native libraries
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }
    
    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            
            // Enable code coverage
            testCoverageEnabled true
            
            // Proguard for debug builds (optional)
            minifyEnabled false
            shrinkResources false
            
            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "API_BASE_URL", "\"https://api-dev.filesystemds.com\""
        }
        
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Signing config (will be configured in CI/CD)
            signingConfig signingConfigs.debug
            
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "API_BASE_URL", "\"https://api.filesystemds.com\""
        }
        
        benchmark {
            initWith release
            matchingFallbacks = ['release']
            debuggable false
            signingConfig signingConfigs.debug
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        
        // Enable core library desugaring for modern APIs
        coreLibraryDesugaringEnabled true
    }
    
    kotlinOptions {
        jvmTarget = '17'
        
        // Enable Kotlin compiler optimizations
        freeCompilerArgs += [
            '-opt-in=kotlin.RequiresOptIn',
            '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
        ]
    }
    
    buildFeatures {
        buildConfig true
        compose true
        viewBinding true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.composeCompilerVersion
    }
    
    packaging {
        resources {
            excludes += [
                '/META-INF/{AL2.0,LGPL2.1}',
                '/META-INF/gradle/incremental.annotation.processors'
            ]
        }
    }
    
    // Lint configuration
    lint {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }
    
    // Test options
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        
        animationsDisabled = true
    }
}

dependencies {
    // Core Android dependencies
    implementation "androidx.core:core-ktx:${rootProject.ext.coreKtxVersion}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
    implementation "com.google.android.material:material:${rootProject.ext.materialVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintLayoutVersion}"
    
    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.ext.lifecycleVersion}"
    
    // Activity & Fragment
    implementation "androidx.activity:activity-ktx:${rootProject.ext.activityVersion}"
    implementation "androidx.fragment:fragment-ktx:${rootProject.ext.fragmentVersion}"
    
    // Jetpack Compose
    implementation platform("androidx.compose:compose-bom:${rootProject.ext.compose_version}")
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.activity:activity-compose'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose'
    
    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // Network & Serialization
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpVersion}"
    implementation "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // Security
    implementation "androidx.security:security-crypto:${rootProject.ext.securityCryptoVersion}"
    
    // Permissions
    implementation 'com.karumi:dexter:6.2.3'
    
    // Image loading
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    
    // FileSystemds specific dependencies
    implementation 'androidx.work:work-runtime-ktx:2.9.0'
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    
    // Core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // Development tools
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // Testing dependencies
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.extJunitVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
}

// Helper function to get git commit hash
def getGitCommitHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return "unknown"
    }
}